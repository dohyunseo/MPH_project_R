---
title: "Lab3_clustering"
format: html
editor: visual
---

# Load packages

The package cluster will be used for the hierarchical clustering and k-means

```{r}
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| 
library(FactoMineR)
library(factoextra)
library(foreign)
library(cluster)
library(ggplot2)
library(gtsummary)
library(dplyr)

```

# Data importation

```{r}
#| echo: true
hemo <- read.table("hemo.txt", header =T, sep = "", dec = ".")
```

# 1. Perform a HAC

## 1.1 Variable selection and standardization

Select quantitative variables on which to perform the analyse and standardized the data (not necessary if all the quantitative variables are in the same scale).

```{r}
#selection 
hemo.clus<-hemo[, c("agediag", "ast", "alt", "ggt", "fer", "cs", "frt", "chfage", "bmi")]

#standardized the data  

hemo.st <- scale(hemo.clus,center=T,scale=T)
```

## 1.2 Generate distance matrix on the data standardized

```{r}

hemo.d <- dist(hemo.st)

```

## 1.3 Use HAC with Ward criterion with the function hclust in package cluster

The most common aggregation criteria used in public health is the Ward criteria but other aggregation criteria can be used following your research question.

```{r}
#method = ward.D2 

hemo.cah <- hclust(hemo.d,method="ward.D2")
```

##1.4 Plot the dendrogram and selection number of clusters

```{r}
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| fig-format: png

plot(hemo.cah)
```

Based on the dendrogram you will choose Two clusters. You have to stipulate that you will cut the tree (dendrogram in 2)

```{r}

class.hemo.cah <- cutree(hemo.cah,k=2)

#print list of each individual associated to each class
print((class.hemo.cah))
```

##1.5 Attach this new variable (cluster) to the initial database

The aim is to create a new qualitative variable that you can merge to your initial data using `c.bind` that can be used later in supervized analysis (models) for example.

```{r}
hemo.cah.data <- cbind(hemo, class.hemo.cah)


#created a contingency table to test the association between the clusters created and diagnosis of cirrhosis

test <-table(hemo.cah.data$class.hemo.cah, hemo.cah.data$recodcir)
fisher.test(test)

```

The clusters are associated with the diagnosis of cirrhosis.

# 2. HAC on principal components

The HCA can be performed on principal components obtained either from your PCA or MCA.

## 2.1 Perform a PCA

```{r}

#select variable and run PCA

hemo.PCA<-hemo[, c("agediag", "ast", "alt", "ggt", "fer", "cs", "frt", "chfage", "bmi", "recodcir","alcoolisme", "sexe")]

res.pca<- PCA(hemo.PCA, scale.unit = T, ncp = 5, quali.sup = 10:12, graph = F) 
```

NB : Because by default you had selected 5 dimensions (ncp = 5). If you want to create a HCA on more dimensions you have to change the number of component on the `ncp` option. Let say that you want to input 20 dimensions into your HAC you have to write ncp = 20.

## 2.2 Perform a HAC on principal components using HCPC function

The `hcpc` function produces 3 plots (dendrogram, factor map, graphic 3 D). The`consol = F/T` mean that you will choose or not to consolidate you HAC by a kmeans partitionning. Ff `nb.clust = -1`, the dendrogram will be cut automatically following the critera of inertia gain and if `nb.clust = 0` -\> the user choose itself. If the 0 option is not working specify in min and max the number of clusters you want. For example if you want 4 clusters put `min = 4` and `max = 4`.

```{r}
#| eval: false
#| echo: true

# Perform a HAC with the function HCPC On PCA results
res.pca.hcpc<-HCPC(res.pca ,nb.clust=-1,consol=T,min=2,max=10,graph=F)

```

```{r}
#| eval: true
#| echo: false

# Perform a HAC with the function HCPC On PCA results
res.pca.hcpc<-HCPC(res.pca ,nb.clust=0,consol=T,min=2,max=2,graph=F)

```

You can also display the dendrogram using the `fviz_dend`

```{r}

#| warning: false
#| message : false

#print dendrogram with faxtoextra

fviz_dend(res.pca.hcpc,
          cex = 0.7, # Label size
          palette = "jco", # Color palette
          rect = TRUE, rect_fill = TRUE, # Add rectangle around groups
          rect_border = "jco", # Rectangle color
          labels_track_height = 0.8 # Augment the room for labels
)
```

Your can visualize individuals on the the factor and color the individuals according to their cluster.

```{r}

fviz_cluster(res.pca.hcpc,
             repel = TRUE,            # Avoid label overlapping
             show.clust.cent = TRUE, # Show cluster centers
             palette = "jco",         # Color palette see ?ggpubr::ggpar
             ggtheme = theme_minimal(),
             main = "Factor map"
)
```

## 2.3 Describe the clusters

The different clusters selected can be described by other variables (active and illustrative) in the results `res.pca.hcpc$desc.var` using the v-test criteria (\> 2).

```{r}
res.pca.hcpc$desc.var$quanti #clusters described by the quantitative active variables. 

res.pca.hcpc$desc.var$category #clusters described by the illustrative qualitative variables.

res.pca.hcpc$desc.var$test.chi2 


```

The new cluster variable can also be described by retrieving the new dataset with cluster variable included available in `res.pca.hcpc$data.clust`

```{r}

#| message: false
#| warning: false

clust.data <- res.pca.hcpc$data.clust#retrieve data (cluster var included in data.clust)
clust.data %>%
          dplyr::select(clust, ast, alt, ggt, fer, frt, agediag, cs, bmi, chfage) %>% 
          tbl_summary(by = clust) %>%
          add_p()

```

# 3. KMEANS

## 3.1 Perform a kmeans using hclust package

Use the standardized data already elaborated in 1. "hemo.st" to perform your k-means

```{r}

#performing k-means with the kmeans function
#center = number of groups a priori
#nstart =  random set to chose, here we try 30 times the procedure and keep with the best value

hemokmeans <- kmeans(hemo.st , centers = 2, nstart =30)


```

## 3.2 Interpretation of clusters

You can have a look the cluster assign for each individual.

```{r}
hemokmeans$cluster 

```

You can have a look the within-cluster sum of squares (inertia)

```{r}
hemokmeans$tot.withinss

```

You can have a look the between-cluster sum of squares (inertia)

```{r}
hemokmeans$betweenss
```

## 3.3 Choosing the best number of clusters

There is more than 30 indices developed in order to help researchers in determining the best number of clusters. The`fviz_nbclust`function propose 3 of them : wws, gap statistic and average silhouette. You can refer to the lecture to have more details on this indices.

Gap statistic

```{r}

fviz_nbclust(hemo.st, kmeans, method = "gap_stat")

```

Average silhouette

```{r}
fviz_nbclust(hemo.st, kmeans, method = "wss") +
  geom_vline(xintercept = 2, linetype = 2)

```

wws

```{r}
fviz_nbclust(hemo.st, FUN= hcut, method = "silhouette") +
  geom_vline(xintercept = 2, linetype = 2)
```

## 3.4 Attach the results of the selected cluster to each individual of the initial database

```{r}
hemo.kmeans.data <- data.frame(hemo.cah.data, clusterkmeans = hemokmeans$cluster)

```

You can display the results of kmeans on the PCA plot using factoextra. Each observations will be colored according to their assigned cluster.

```{r}
fviz_cluster(hemokmeans, data = hemo.clus,
             ellipse.type = "convex",
             palette = "rickandmorty",
             ggtheme = theme_minimal())
```

You can now describe each cluster by the different variables using `tbl_summary`function

```{r}
#| message: false
#| warning: false
 
hemo.kmeans.data %>%
  dplyr::select(clusterkmeans, ast, alt, ggt, fer) %>% 
  mutate(clusterkmeans= factor(clusterkmeans, levels= c(1,2), labels=c("class1kmeans", "class2kmeans"))) %>% 
          tbl_summary(by = clusterkmeans) %>%
          add_p()

```

# 4. Comparison of the 3 types of clustering

You can check on the differences between the HAC, HAC on PCA and Kmeans. Are the observations in the same cluster using different clustering approaches ?

As you can observed, the two types of clustering may provide different results because they are based on different algorithms but the general "struture" will be the same.

```{r}

clust.comp <- data.frame(hemo.cah.data, clusterkmeans = hemokmeans$cluster, pca.clust = clust.data$clust) 
with(clust.comp, table(class.hemo.cah,clusterkmeans))
with(clust.comp, table(class.hemo.cah,pca.clust))
with(clust.comp, table(pca.clust,clusterkmeans))

```
